package models

import (
	"time"

	"github.com/GhostDrew11/vigor-api/internal/utils"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type User struct {
	ID                 primitive.ObjectID `bson:"_id" json:"id"`                       // Automatically generated by MongoDB.
	Role               string             `bson:"role" json:"role" binding:"required"` // Explicitly set to "user"
	FirstName          string             `bson:"firstName" json:"firstName" binding:"required"`
	LastName           string             `bson:"lastName" json:"lastName" binding:"required"`
	Email              string             `bson:"email" json:"email" binding:"required"`
	PasswordHash       string             `bson:"passwordHash" json:"passwordHash" binding:"required"`
	BirthDate          time.Time          `bson:"birthDate" json:"birthDate" binding:"required"`
	Gender             string             `bson:"gender" json:"gender" binding:"required"`
	Height             int                `bson:"height" json:"height" binding:"required"`
	Weight             int                `bson:"weight" json:"weight" binding:"required"`
	Subscription       UserSubscription   `bson:"subscription" json:"subscription" binding:"required"`
	TrialEndsAt        time.Time          `bson:"trialEndsAt" json:"trialEndsAt" binding:"required"`
	ProfileInformation UserProfile        `bson:"profileInformation" json:"profileInformation" binding:"required"`
	SystemPreferences  *SystemPreferences  `bson:"systemPreferences,omitempty" json:"systemPreferences,omitempty"`
}

type UserSubscription struct {
	Type            string     `bson:"type" json:"type" binding:"required"`
	Status          string     `bson:"status" json:"status" binding:"required"`
	StartDate       time.Time `bson:"startDate,omitempty" json:"startDate" binding:"required"`
	EndDate         *time.Time `bson:"endDate,omitempty" json:"endDate,omitempty"`
	NextRenewalDate *time.Time `bson:"nextRenewalDate,omitempty" json:"nextRenewalDate,omitempty"` // Next scheduled renewal date
	IsActive        bool       `bson:"isActive" json:"isActive" binding:"required"`                                   // Indicates whether the input is currently active
}

type UserProfile struct {
	Username         string            `bson:"username" json:"username" binding:"required"`
	ProfilePicture   string            `bson:"profilePicture" json:"profilePicture"` // URL to the user's profile picture.
	MainGoal         string            `bson:"mainGoal" json:"mainGoal" binding:"required"`
	SecondaryGoal    *string           `bson:"secondaryGoal,omitempty" json:"secondaryGoal,omitempty"` // Optional for female users.
	BodyInformation  BodyInformation   `bson:"bodyInformation" json:"bodyInformation" binding:"required"`
	ActivityLevel    string            `bson:"activityLevel" json:"activityLevel" binding:"required"`
	PhysicalActivity PhysicalActivity  `bson:"physicalActivity" json:"physicalActivity" binding:"required"`
	Lifestyle        Lifestyle         `bson:"lifestyle" json:"lifestyle" binding:"required"`
	CycleInformation *CycleInformation `bson:"cycleInformation,omitempty" json:"cycleInformation,omitempty"` // Optional for female users.
}

type BodyInformation struct {
	BodyType           string   `bson:"bodyType" json:"bodyType" binding:"required"`
	BodyGoal           *string  `bson:"bodyGoal,omitempty" json:"bodyGoal,omitempty"` // Optional future feature.
	HealthRestrictions []string `bson:"healthRestrictions" json:"healthRestrictions"` // Consider if this should be "required".
	FocusArea          []string `bson:"focusArea" json:"focusArea"`                   // Optional future feature, no binding required yet.
}

type PhysicalActivity struct {
	FitnessLevel string   `bson:"fitnessLevel" json:"fitnessLevel" binding:"required"`
	Activities   []string `bson:"activities" json:"activities" binding:"required"`
}

type Lifestyle struct {
	Diet                     string   `bson:"diet" json:"diet" binding:"required"`
	WaterIntake              *int     `bson:"waterIntake,omitempty" json:"waterIntake,omitempty"`     // Optional future feature.
	SleepDuration            *int     `bson:"sleepDuration,omitempty" json:"sleepDuration,omitempty"` // Optional future feature.
	TypicalDay               string   `bson:"typicalDay" json:"typicalDay" binding:"required"`
	TrainingLocation         string   `bson:"trainingLocation" json:"trainingLocation" binding:"required"`
	WorkoutTime              string   `bson:"workoutTime" json:"workoutTime" binding:"required"`
	WorkoutFrequency         *int     `bson:"workoutFrequency,omitempty" json:"workoutFrequency,omitempty"` // Optional future feature.
	WorkoutDuration          string   `bson:"workoutDuration" json:"workoutDuration" binding:"required"`
	DiscoveryMethod          *string  `bson:"discoveryMethod,omitempty" json:"discoveryMethod,omitempty"` // Optional future feature.
	IntolerancesAndAllergies []string `bson:"intolerancesAndAllergies,omitempty" json:"intolerancesAndAllergies,omitempty"`   // List of user's intolerances and allergies.
}

type CycleInformation struct {
	ReproductiveStage string `bson:"reproductiveStage" json:"reproductiveStage"` // Consider if binding is required based on application logic.
}

type SystemPreferences struct {
	Language          string `bson:"language" json:"language"`
	TimeZone          string `bson:"timeZone" json:"timeZone"`
	DisplayMode       string `bson:"displayMode" json:"displayMode"`
	MeasurementSystem string `bson:"measurementSystem" json:"measurementSystem"`
	AllowReadReceipt  bool   `bson:"allowReadReceipt" json:"allowReadReceipt"` // Global setting for allowing read receipts.
}

func NewUserfromInput(input UserRegistrationInput) (User, error) {
	hasher := &utils.DefaultHasher{}
	hashedPassword, err := hasher.HashPassword(input.Password)
	if err != nil {
		return User{}, err
	}
	userSubscription := convertSubscriptionInput(input.Subscription)

	user := User{
		ID:                 primitive.NewObjectID(),
		Role:               "user",
		FirstName:          input.FirstName,
		LastName:           input.LastName,
		Email:              input.Email,
		PasswordHash:       hashedPassword,
		BirthDate:          input.BirthDate,
		Gender:             input.Gender,
		Height:             input.Height,
		Weight:             input.Weight,
		Subscription:       *userSubscription,
		TrialEndsAt:        input.TrialEndsAt,
		ProfileInformation: convertUserProfileInput(input.ProfileInformation),
		SystemPreferences:  convertSystemPreferencesInput(input.SystemPreferences),
	}

	return user, nil
}

func convertSubscriptionInput(input SubscriptionInput) *UserSubscription {
	return &UserSubscription{
		Type:            input.Type,
		Status:          input.Status,
		StartDate:       input.StartDate,
		EndDate:         input.EndDate,
		NextRenewalDate: input.NextRenewalDate,
		IsActive:        input.IsActive,
	}
}

func convertUserProfileInput(input UserProfileInput) UserProfile {
	return UserProfile{
		Username:       input.Username,
		ProfilePicture: input.ProfilePicture,
		MainGoal:       input.MainGoal,
		SecondaryGoal:  &input.SecondaryGoal,
		BodyInformation: BodyInformation{
			BodyType:           input.BodyInformation.BodyType,
			BodyGoal:           input.BodyInformation.BodyGoal,
			HealthRestrictions: input.BodyInformation.HealthRestrictions,
			FocusArea:          input.BodyInformation.FocusArea,
		},
		ActivityLevel: input.ActivityLevel,
		PhysicalActivity: PhysicalActivity{
			FitnessLevel: input.PhysicalActivity.FitnessLevel,
			Activities:   input.PhysicalActivity.Activities,
		},
		Lifestyle: Lifestyle{
			Diet:                     input.Lifestyle.Diet,
			WaterIntake:              input.Lifestyle.WaterIntake,
			SleepDuration:            input.Lifestyle.SleepDuration,
			TypicalDay:               input.Lifestyle.TypicalDay,
			TrainingLocation:         input.Lifestyle.TrainingLocation,
			WorkoutTime:              input.Lifestyle.WorkoutTime,
			WorkoutFrequency:         input.Lifestyle.WorkoutFrequency,
			WorkoutDuration:          input.Lifestyle.WorkoutDuration,
			DiscoveryMethod:          input.Lifestyle.DiscoveryMethod,
			IntolerancesAndAllergies: input.Lifestyle.IntolerancesAndAllergies,
		},
	}
}

func convertSystemPreferencesInput(input *SystemPreferencesInput) *SystemPreferences {
	if input == nil {
		return nil
	}

	return &SystemPreferences{
		Language:          input.Language,
		TimeZone:          input.TimeZone,
		DisplayMode:       input.DisplayMode,
		MeasurementSystem: input.MeasurementSystem,
		AllowReadReceipt:  input.AllowReadReceipt,
	}
}
